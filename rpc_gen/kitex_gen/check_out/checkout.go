// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package check_out

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"gomall/rpc_gen/kitex_gen/payment"
	"strings"
)

type CheckOutReq struct {
	UserId     int64                   `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Firstname  string                  `thrift:"firstname,2" frugal:"2,default,string" json:"firstname"`
	Lastname   string                  `thrift:"lastname,3" frugal:"3,default,string" json:"lastname"`
	Email      string                  `thrift:"email,4" frugal:"4,default,string" json:"email"`
	Address    *Address                `thrift:"address,5" frugal:"5,default,Address" json:"address"`
	CreditCard *payment.CreditCardInfo `thrift:"credit_card,6" frugal:"6,default,payment.CreditCardInfo" json:"credit_card"`
}

func NewCheckOutReq() *CheckOutReq {
	return &CheckOutReq{}
}

func (p *CheckOutReq) InitDefault() {
}

func (p *CheckOutReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *CheckOutReq) GetFirstname() (v string) {
	return p.Firstname
}

func (p *CheckOutReq) GetLastname() (v string) {
	return p.Lastname
}

func (p *CheckOutReq) GetEmail() (v string) {
	return p.Email
}

var CheckOutReq_Address_DEFAULT *Address

func (p *CheckOutReq) GetAddress() (v *Address) {
	if !p.IsSetAddress() {
		return CheckOutReq_Address_DEFAULT
	}
	return p.Address
}

var CheckOutReq_CreditCard_DEFAULT *payment.CreditCardInfo

func (p *CheckOutReq) GetCreditCard() (v *payment.CreditCardInfo) {
	if !p.IsSetCreditCard() {
		return CheckOutReq_CreditCard_DEFAULT
	}
	return p.CreditCard
}
func (p *CheckOutReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *CheckOutReq) SetFirstname(val string) {
	p.Firstname = val
}
func (p *CheckOutReq) SetLastname(val string) {
	p.Lastname = val
}
func (p *CheckOutReq) SetEmail(val string) {
	p.Email = val
}
func (p *CheckOutReq) SetAddress(val *Address) {
	p.Address = val
}
func (p *CheckOutReq) SetCreditCard(val *payment.CreditCardInfo) {
	p.CreditCard = val
}

var fieldIDToName_CheckOutReq = map[int16]string{
	1: "user_id",
	2: "firstname",
	3: "lastname",
	4: "email",
	5: "address",
	6: "credit_card",
}

func (p *CheckOutReq) IsSetAddress() bool {
	return p.Address != nil
}

func (p *CheckOutReq) IsSetCreditCard() bool {
	return p.CreditCard != nil
}

func (p *CheckOutReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckOutReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckOutReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CheckOutReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Firstname = _field
	return nil
}
func (p *CheckOutReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Lastname = _field
	return nil
}
func (p *CheckOutReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *CheckOutReq) ReadField5(iprot thrift.TProtocol) error {
	_field := NewAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Address = _field
	return nil
}
func (p *CheckOutReq) ReadField6(iprot thrift.TProtocol) error {
	_field := payment.NewCreditCardInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreditCard = _field
	return nil
}

func (p *CheckOutReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckOutReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckOutReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckOutReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("firstname", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Firstname); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckOutReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastname", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Lastname); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CheckOutReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CheckOutReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Address.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CheckOutReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("credit_card", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreditCard.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CheckOutReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckOutReq(%+v)", *p)

}

func (p *CheckOutReq) DeepEqual(ano *CheckOutReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Firstname) {
		return false
	}
	if !p.Field3DeepEqual(ano.Lastname) {
		return false
	}
	if !p.Field4DeepEqual(ano.Email) {
		return false
	}
	if !p.Field5DeepEqual(ano.Address) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreditCard) {
		return false
	}
	return true
}

func (p *CheckOutReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CheckOutReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Firstname, src) != 0 {
		return false
	}
	return true
}
func (p *CheckOutReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Lastname, src) != 0 {
		return false
	}
	return true
}
func (p *CheckOutReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *CheckOutReq) Field5DeepEqual(src *Address) bool {

	if !p.Address.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CheckOutReq) Field6DeepEqual(src *payment.CreditCardInfo) bool {

	if !p.CreditCard.DeepEqual(src) {
		return false
	}
	return true
}

type Address struct {
	StreetAddress string `thrift:"street_address,1" frugal:"1,default,string" json:"street_address"`
	City          string `thrift:"city,2" frugal:"2,default,string" json:"city"`
	State         string `thrift:"state,3" frugal:"3,default,string" json:"state"`
	Country       string `thrift:"country,4" frugal:"4,default,string" json:"country"`
	ZipCode       string `thrift:"zip_code,5" frugal:"5,default,string" json:"zip_code"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) InitDefault() {
}

func (p *Address) GetStreetAddress() (v string) {
	return p.StreetAddress
}

func (p *Address) GetCity() (v string) {
	return p.City
}

func (p *Address) GetState() (v string) {
	return p.State
}

func (p *Address) GetCountry() (v string) {
	return p.Country
}

func (p *Address) GetZipCode() (v string) {
	return p.ZipCode
}
func (p *Address) SetStreetAddress(val string) {
	p.StreetAddress = val
}
func (p *Address) SetCity(val string) {
	p.City = val
}
func (p *Address) SetState(val string) {
	p.State = val
}
func (p *Address) SetCountry(val string) {
	p.Country = val
}
func (p *Address) SetZipCode(val string) {
	p.ZipCode = val
}

var fieldIDToName_Address = map[int16]string{
	1: "street_address",
	2: "city",
	3: "state",
	4: "country",
	5: "zip_code",
}

func (p *Address) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Address[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Address) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StreetAddress = _field
	return nil
}
func (p *Address) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.City = _field
	return nil
}
func (p *Address) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.State = _field
	return nil
}
func (p *Address) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Country = _field
	return nil
}
func (p *Address) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ZipCode = _field
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Address"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("street_address", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StreetAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.City); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Country); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("zip_code", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ZipCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)

}

func (p *Address) DeepEqual(ano *Address) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StreetAddress) {
		return false
	}
	if !p.Field2DeepEqual(ano.City) {
		return false
	}
	if !p.Field3DeepEqual(ano.State) {
		return false
	}
	if !p.Field4DeepEqual(ano.Country) {
		return false
	}
	if !p.Field5DeepEqual(ano.ZipCode) {
		return false
	}
	return true
}

func (p *Address) Field1DeepEqual(src string) bool {

	if strings.Compare(p.StreetAddress, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field2DeepEqual(src string) bool {

	if strings.Compare(p.City, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field3DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Country, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ZipCode, src) != 0 {
		return false
	}
	return true
}

type CheckOutResp struct {
	OrderId       string `thrift:"order_id,1" frugal:"1,default,string" json:"order_id"`
	TransactionId string `thrift:"transaction_id,2" frugal:"2,default,string" json:"transaction_id"`
}

func NewCheckOutResp() *CheckOutResp {
	return &CheckOutResp{}
}

func (p *CheckOutResp) InitDefault() {
}

func (p *CheckOutResp) GetOrderId() (v string) {
	return p.OrderId
}

func (p *CheckOutResp) GetTransactionId() (v string) {
	return p.TransactionId
}
func (p *CheckOutResp) SetOrderId(val string) {
	p.OrderId = val
}
func (p *CheckOutResp) SetTransactionId(val string) {
	p.TransactionId = val
}

var fieldIDToName_CheckOutResp = map[int16]string{
	1: "order_id",
	2: "transaction_id",
}

func (p *CheckOutResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckOutResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckOutResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderId = _field
	return nil
}
func (p *CheckOutResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionId = _field
	return nil
}

func (p *CheckOutResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckOutResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckOutResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckOutResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransactionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckOutResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckOutResp(%+v)", *p)

}

func (p *CheckOutResp) DeepEqual(ano *CheckOutResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TransactionId) {
		return false
	}
	return true
}

func (p *CheckOutResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.OrderId, src) != 0 {
		return false
	}
	return true
}
func (p *CheckOutResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TransactionId, src) != 0 {
		return false
	}
	return true
}

type CheckOutService interface {
	CheccOut(ctx context.Context, req *CheckOutReq) (r *CheckOutResp, err error)
}

type CheckOutServiceClient struct {
	c thrift.TClient
}

func NewCheckOutServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CheckOutServiceClient {
	return &CheckOutServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCheckOutServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CheckOutServiceClient {
	return &CheckOutServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCheckOutServiceClient(c thrift.TClient) *CheckOutServiceClient {
	return &CheckOutServiceClient{
		c: c,
	}
}

func (p *CheckOutServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CheckOutServiceClient) CheccOut(ctx context.Context, req *CheckOutReq) (r *CheckOutResp, err error) {
	var _args CheckOutServiceCheccOutArgs
	_args.Req = req
	var _result CheckOutServiceCheccOutResult
	if err = p.Client_().Call(ctx, "CheccOut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CheckOutServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CheckOutService
}

func (p *CheckOutServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CheckOutServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CheckOutServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCheckOutServiceProcessor(handler CheckOutService) *CheckOutServiceProcessor {
	self := &CheckOutServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CheccOut", &checkOutServiceProcessorCheccOut{handler: handler})
	return self
}
func (p *CheckOutServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type checkOutServiceProcessorCheccOut struct {
	handler CheckOutService
}

func (p *checkOutServiceProcessorCheccOut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckOutServiceCheccOutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheccOut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CheckOutServiceCheccOutResult{}
	var retval *CheckOutResp
	if retval, err2 = p.handler.CheccOut(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheccOut: "+err2.Error())
		oprot.WriteMessageBegin("CheccOut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheccOut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CheckOutServiceCheccOutArgs struct {
	Req *CheckOutReq `thrift:"req,1" frugal:"1,default,CheckOutReq" json:"req"`
}

func NewCheckOutServiceCheccOutArgs() *CheckOutServiceCheccOutArgs {
	return &CheckOutServiceCheccOutArgs{}
}

func (p *CheckOutServiceCheccOutArgs) InitDefault() {
}

var CheckOutServiceCheccOutArgs_Req_DEFAULT *CheckOutReq

func (p *CheckOutServiceCheccOutArgs) GetReq() (v *CheckOutReq) {
	if !p.IsSetReq() {
		return CheckOutServiceCheccOutArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CheckOutServiceCheccOutArgs) SetReq(val *CheckOutReq) {
	p.Req = val
}

var fieldIDToName_CheckOutServiceCheccOutArgs = map[int16]string{
	1: "req",
}

func (p *CheckOutServiceCheccOutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckOutServiceCheccOutArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckOutServiceCheccOutArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckOutServiceCheccOutArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCheckOutReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CheckOutServiceCheccOutArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheccOut_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckOutServiceCheccOutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckOutServiceCheccOutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckOutServiceCheccOutArgs(%+v)", *p)

}

func (p *CheckOutServiceCheccOutArgs) DeepEqual(ano *CheckOutServiceCheccOutArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CheckOutServiceCheccOutArgs) Field1DeepEqual(src *CheckOutReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CheckOutServiceCheccOutResult struct {
	Success *CheckOutResp `thrift:"success,0,optional" frugal:"0,optional,CheckOutResp" json:"success,omitempty"`
}

func NewCheckOutServiceCheccOutResult() *CheckOutServiceCheccOutResult {
	return &CheckOutServiceCheccOutResult{}
}

func (p *CheckOutServiceCheccOutResult) InitDefault() {
}

var CheckOutServiceCheccOutResult_Success_DEFAULT *CheckOutResp

func (p *CheckOutServiceCheccOutResult) GetSuccess() (v *CheckOutResp) {
	if !p.IsSetSuccess() {
		return CheckOutServiceCheccOutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckOutServiceCheccOutResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckOutResp)
}

var fieldIDToName_CheckOutServiceCheccOutResult = map[int16]string{
	0: "success",
}

func (p *CheckOutServiceCheccOutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckOutServiceCheccOutResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckOutServiceCheccOutResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckOutServiceCheccOutResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCheckOutResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CheckOutServiceCheccOutResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheccOut_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckOutServiceCheccOutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckOutServiceCheccOutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckOutServiceCheccOutResult(%+v)", *p)

}

func (p *CheckOutServiceCheccOutResult) DeepEqual(ano *CheckOutServiceCheccOutResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckOutServiceCheccOutResult) Field0DeepEqual(src *CheckOutResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
