// Code generated by Kitex v0.9.1. DO NOT EDIT.

package productcatalogservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	product "gomall/rpc_gen/kitex_gen/product"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListProduct": kitex.NewMethodInfo(
		listProductHandler,
		newProductCatalogServiceListProductArgs,
		newProductCatalogServiceListProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetProduct": kitex.NewMethodInfo(
		getProductHandler,
		newProductCatalogServiceGetProductArgs,
		newProductCatalogServiceGetProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchProduct": kitex.NewMethodInfo(
		searchProductHandler,
		newProductCatalogServiceSearchProductArgs,
		newProductCatalogServiceSearchProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	productCatalogServiceServiceInfo                = NewServiceInfo()
	productCatalogServiceServiceInfoForClient       = NewServiceInfoForClient()
	productCatalogServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductCatalogService"
	handlerType := (*product.ProductCatalogService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func listProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductCatalogServiceListProductArgs)
	realResult := result.(*product.ProductCatalogServiceListProductResult)
	success, err := handler.(product.ProductCatalogService).ListProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductCatalogServiceListProductArgs() interface{} {
	return product.NewProductCatalogServiceListProductArgs()
}

func newProductCatalogServiceListProductResult() interface{} {
	return product.NewProductCatalogServiceListProductResult()
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductCatalogServiceGetProductArgs)
	realResult := result.(*product.ProductCatalogServiceGetProductResult)
	success, err := handler.(product.ProductCatalogService).GetProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductCatalogServiceGetProductArgs() interface{} {
	return product.NewProductCatalogServiceGetProductArgs()
}

func newProductCatalogServiceGetProductResult() interface{} {
	return product.NewProductCatalogServiceGetProductResult()
}

func searchProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductCatalogServiceSearchProductArgs)
	realResult := result.(*product.ProductCatalogServiceSearchProductResult)
	success, err := handler.(product.ProductCatalogService).SearchProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductCatalogServiceSearchProductArgs() interface{} {
	return product.NewProductCatalogServiceSearchProductArgs()
}

func newProductCatalogServiceSearchProductResult() interface{} {
	return product.NewProductCatalogServiceSearchProductResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListProduct(ctx context.Context, req *product.ListProductsReq) (r *product.ListProductsResp, err error) {
	var _args product.ProductCatalogServiceListProductArgs
	_args.Req = req
	var _result product.ProductCatalogServiceListProductResult
	if err = p.c.Call(ctx, "ListProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, req *product.GetProductReq) (r *product.GetProductResp, err error) {
	var _args product.ProductCatalogServiceGetProductArgs
	_args.Req = req
	var _result product.ProductCatalogServiceGetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchProduct(ctx context.Context, req *product.SearchProductsReq) (r *product.SearchProductsResp, err error) {
	var _args product.ProductCatalogServiceSearchProductArgs
	_args.Req = req
	var _result product.ProductCatalogServiceSearchProductResult
	if err = p.c.Call(ctx, "SearchProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
